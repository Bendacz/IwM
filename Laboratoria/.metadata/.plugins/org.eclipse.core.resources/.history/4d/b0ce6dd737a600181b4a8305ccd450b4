package networking.udp;
 
import java.io.File;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import projekt.Packet;


class WriteThread extends Thread {

	protected Packet packet;
	protected DatagramPacket request;
	protected DatagramSocket aSocket;
	
	public WriteThread(Packet p, DatagramPacket r, DatagramSocket aSocket) {
		this.packet = p;
		this.request = r;
		this.aSocket = aSocket;
		start();
	}
	
	public void run() {
		 try {
			 System.out.println("Writing " + packet.getFileName() + ".txt on disk");
			 File name = new File(packet.getFileName() + ".txt");
			 Files.write(name.toPath(), request.getData());
			 System.out.println("");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}


class SendDataThread extends Thread {
	
	protected Packet p;
	protected Path path;
	protected DatagramPacket request;
	protected DatagramSocket aSocket;

	public SendDataThread(Packet p, Path path, DatagramPacket request, DatagramSocket aSocket) {
		this.p = p;
		this.path = path;
		this.request = request;
		this.aSocket = aSocket;
		start();
	}
	
	public void run() {
		try {
			if(Files.exists(path)) {
	        System.out.println("Sending requested data");
			byte[] data = Files.readAllBytes(path);
			DatagramPacket reply = new DatagramPacket(data, data.length, 
			request.getAddress(), request.getPort());
			aSocket.send(reply);
			} else {
			DatagramPacket reply = new DatagramPacket(request.getData(), request.getLength(), 
			request.getAddress(), request.getPort());
			aSocket.send(reply);
			}
    	} catch (SocketException ex) {
        Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
    	} catch (IOException ex) {
        Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
	  	}
	}
}

class FileNamesListThread extends Thread{
	
	protected String directoryPath;
	protected Packet p;
	protected DatagramPacket request;
	protected DatagramSocket aSocket;
	protected String w;
	
	public FileNamesListThread(String directoryPath, Packet p, DatagramPacket request, DatagramSocket aSocket){
		this.directoryPath = directoryPath;
		this.p = p;
		//this.path = path;
		this.request = request;
		this.aSocket = aSocket;
		start();
	}
	
	public void run() {
		try {
	    byte[] buffer = new byte[1024];
		File dir = new File(directoryPath);
		Collection<String> files  = new ArrayList<String>();
		w = "List of files that satisfy request:";
		if(dir.isDirectory()){
			File[] listFiles = dir.listFiles();
		    for(File file : listFiles){
		    	if(file.isFile() && !".classpath".equals(file.getName()) && !".project".equals(file.getName())) {
		    		files.add(file.getName());
		            String[] fileNames_temp;
		            String[] fileNames;
		            String s;
		            String s_temp = file.getName();
		            fileNames_temp =  s_temp.split("\\.");
		            s = fileNames_temp[0];
		            fileNames = s.split("_");
		            if ((((Request) p).requestedDeviceName.equals(fileNames[0]) || ((Request) p).requestedDeviceName.equals("-")) && (((Request) p).requestedChannelNr.equals(fileNames[1]) || ((Request) p).requestedChannelNr.equals("-"))) {
		            	w = w.concat("\n" + s_temp);
		            }               		
		    	}
		    }
		}
		String a = ((Request)p).getRequestedDeviceName();
		String b = ((Request)p).getRequestedChannelNr();
		FileList req = new FileList(a, b, w);
		buffer = Tools.serialize(req);
		DatagramPacket reply = new DatagramPacket(buffer, buffer.length, 
		request.getAddress(), request.getPort());
		aSocket.send(reply);	
	    } catch (IOException ex) {
	    	Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
		}
	}
}

public class UDPServer{
    public static void main(String[] args) throws ClassNotFoundException {
    	DatagramSocket aSocket = null;
    	String spath = new String("C:/Users/PLJABEN/Desktop/St/Informatyka w Mechatronice/Laboratoria/Java/lab2/"); //tutaj proszę umieścić swoją ścieżkę do katalogu serwera
      try {
        aSocket = new DatagramSocket(9876);
        byte[] buffer = new byte[1024];
        while(true) {

        System.out.println("Waiting for request...");
 
        DatagramPacket request = new DatagramPacket(buffer, buffer.length);
        aSocket.receive(request);
        Packet p = (Packet)Tools.deserialize(request.getData());
          
        if(p instanceof Request) {
        	System.out.println("Received packet is instance of Request");
        	String fileName = new String(((Request) p).getRequestedFileName() + ".txt");
        	Path path = Paths.get(spath + fileName);
        	new FileNamesListThread(spath,p, request, aSocket).join();
        	new SendDataThread(p, path, request, aSocket).join();
        	System.out.println("");
        } 
        else {
        	System.out.println("Received packet is not instance of Request");
        	new WriteThread(p,request,aSocket).join();
        }
        }
      } catch (SocketException ex) {
        Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
      } catch (IOException ex) {
        Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
      } catch (InterruptedException ex) {
    	Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
	} finally {
    	aSocket.close();
      }
    }
}

