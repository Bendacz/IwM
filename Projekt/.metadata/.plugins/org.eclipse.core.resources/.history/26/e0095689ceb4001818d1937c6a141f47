package networking.rmi.server;

import java.rmi.RemoteException;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import networking.rmi.api.Person;
import networking.rmi.api.PersonService;

public class PersonServiceImpl implements PersonService {

	public PersonServiceImpl() throws RemoteException {

	}

	@Override
	public Person insertPerson(Person person) throws RemoteException {
		//try {
		//	//System.out.println("\nClient" + getClientHost() + " request insertPerson() method...");
		//} catch (ServerNotActiveException ex) {
		//	ex.printStackTrace();
		//}

		PreparedStatement statement = null;

		String sql = "insert into person(id, first_name, last_name, birth_date) values (null, ?, ?, ?)";
		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, person.getFirstName());
			statement.setString(2,  person.getLastName());
			statement.setDate(3,  Date.valueOf(person.getBirthDate().toString()));

			statement.executeUpdate();

			ResultSet result = statement.getGeneratedKeys();
			if(result.next()) {
				person.setId(result.getLong(1));
			}

			result.close();
			System.out.println("[successful]");
			return person;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void updatePerson(Person person) throws RemoteException {
		//try {
			//System.out.println("\nClient" + getClientHost() + " request updatePerson() method...");
		//} catch (ServerNotActiveException ex) {
		//	ex.printStackTrace();
		//}

		PreparedStatement statement = null;

		String sql = "update person set first)name = ?"
				+ ", last_name = ?, birth_date = ?"
				+ "where id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setString(1, person.getFirstName());
			statement.setString(2,  person.getLastName());
			statement.setDate(3,  Date.valueOf(person.getBirthDate().toString()));

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void deletePerson(Long id) throws RemoteException {
		//try {
			//System.out.println("\nClient" + getClientHost() + " request deletePerson() method...");
		//} catch (ServerNotActiveException ex) {
		//	ex.printStackTrace();
		//}

		PreparedStatement statement = null;

		String sql = "delete from person where id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public Person getPersonById(Long id) throws RemoteException {
		//try {
		//	//System.out.println("\nClient" + getClientHost() + " request getPersonById() method...");
		//} catch (ServerNotActiveException ex) {
		//	ex.printStackTrace();
		//}

		PreparedStatement statement = null;

		String sql = "select * from person where id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			ResultSet result = statement.executeQuery();

			Person person = null;
			if(result.next()) {
				person = new Person();
				person.setId(result.getLong("id"));
				person.setFirstName(result.getString("first_name"));
				person.setLastName(result.getString("last_name"));
				person.setBirthDate(LocalDate.parse(result.getDate("birth_date").toString()));
			}

			result.close();
			System.out.println("[successful]");
			return person;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public List<Person> getAllPerson() throws RemoteException {
		//try {
			//System.out.println("\nClient" + getClientHost() + " request getAllPerson() method...");
		//} catch (ServerNotActiveException ex) {
		//	ex.printStackTrace();
		//}

		Statement statement = null;

		String sql = "select * from person";

		try{
			statement = DatabaseConnection.getConnection().createStatement();
			ResultSet result = statement.executeQuery(sql);

			List<Person> list = new ArrayList<Person>();

			while(result.next()) {
				Person person = new Person();
				person.setId(result.getLong("id"));
				person.setFirstName(result.getString("first_name"));
				person.setLastName(result.getString("last_name"));
				person.setBirthDate(LocalDate.parse(result.getDate("birth_date").toString()));
				list.add(person);
			}

			result.close();
			System.out.println("[successful]");
			return list;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

}
