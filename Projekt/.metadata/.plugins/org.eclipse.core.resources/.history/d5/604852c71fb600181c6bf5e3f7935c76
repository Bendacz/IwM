package networking.rmi.server;

import java.rmi.RemoteException;
import java.rmi.server.ServerNotActiveException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import networking.rmi.api.Person;
import networking.rmi.api.PersonalData;
import networking.rmi.api.Service;
import networking.rmi.api.WeekTimetable;

public class ServiceImpl extends UnicastRemoteObject implements Service {

	public ServiceImpl() throws RemoteException {

	}

	//*************************************************************METHODS************************************************************************//

    //============================================================================================================================================//
	//=============================================================PERSONAL DATA==================================================================//
	//============================================================================================================================================//
	@Override
	public PersonalData insertPersonalData(PersonalData pd) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request insertPersonalData() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "insert into personalData(personalData_id, personalData_registeration_number, personalData_student_name"
					+ ", personalData_birth_date, personalData_birth_location, personalData_PESEL, personalData_father_name"
					+ ", personalData_mother_name, personalData_parents_adress, personalData_parents_mobile_number)"
					+ " values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			//statement.setLong(1, pd.getId());
			statement.setLong(1, pd.getRegisterationNumber());
			statement.setString(2,  pd.getStudentName());
			statement.setDate(3,  Date.valueOf(pd.getBirthDate().toString()));
			statement.setString(4,  pd.getBirthLocation());
			statement.setLong(5, pd.getPESEL());
			statement.setString(6,  pd.getFatherName());
			statement.setString(7,  pd.getMotherName());
			statement.setString(8,  pd.getParentsAddress());
			statement.setString(9,  pd.getParentsMobileNumber());

			statement.executeUpdate();

			ResultSet result = statement.getGeneratedKeys();
			if(result.next()) {
				pd.setId(result.getLong(1));
			}

			result.close();
			System.out.println("[successful]");
			return pd;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void updatePersonalData(PersonalData pd) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request updatePersonalData() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "update personalData set personalData_registeration_number = ?, personalData_student_name = ?"
				+ ", personalData_birth_date = ?, personalData_birth_location = ?, personalData_PESEL = ?"
				+ ", personalData_father_name = ?, personalData_mother_name = ?, personalData_parents_adress = ?"
				+ ", personalData_parents_mobile_number = ?"
				+ " where personalData_id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1, pd.getRegisterationNumber());
			statement.setString(2,  pd.getStudentName());
			statement.setDate(3,  Date.valueOf(pd.getBirthDate().toString()));
			statement.setString(4,  pd.getBirthLocation());
			statement.setLong(5, pd.getPESEL());
			statement.setString(6,  pd.getFatherName());
			statement.setString(7,  pd.getMotherName());
			statement.setString(8,  pd.getParentsAddress());
			statement.setString(9,  pd.getParentsMobileNumber());
			statement.setLong(10, pd.getId());

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void deletePersonalData(Long id) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request deletePersonalData() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "delete from personalData where personalData_id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public PersonalData getPersonalDataById(Long id) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request getPersonalDataById() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "select * from personalData where personalData_id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			ResultSet result = statement.executeQuery();

			PersonalData pd = null;
			if(result.next()) {
				pd = new PersonalData();
				pd.setId(result.getLong("personalData_id"));
				pd.setRegisterationNumber(result.getLong("personalData_registeration_number"));
				pd.setStudentName(result.getString("personalData_student_name"));
				pd.setBirthDate(LocalDate.parse(result.getDate("personalData_birth_date").toString()));
				pd.setBirthLocation(result.getString("personalData_birth_location"));
				pd.setPESEL(result.getLong("personalData_PESEL"));
				pd.setFatherName(result.getString("personalData_father_name"));
				pd.setMotherName(result.getString("personalData_mother_name"));
				pd.setParentsAddress(result.getString("personalData_parents_adress"));
				pd.setParentsMobileNumber(result.getString("personalData_parents_mobile_number"));
			}

			result.close();
			System.out.println("[successful]");
			return pd;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public List<PersonalData> getAllPersonalData() throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request getAllPersonalData() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		Statement statement = null;

		String sql = "select * from personalData";

		try{
			statement = DatabaseConnection.getConnection().createStatement();
			ResultSet result = statement.executeQuery(sql);

			List<PersonalData> list = new ArrayList<PersonalData>();

			while(result.next()) {
				PersonalData pd = new PersonalData();
				pd.setId(result.getLong("personalData_id"));
				pd.setRegisterationNumber(result.getLong("personalData_registeration_number"));
				pd.setStudentName(result.getString("personalData_student_name"));
				pd.setBirthDate(LocalDate.parse(result.getDate("personalData_birth_date").toString()));
				pd.setBirthLocation(result.getString("personalData_birth_location"));
				pd.setPESEL(result.getLong("personalData_PESEL"));
				pd.setFatherName(result.getString("personalData_father_name"));
				pd.setMotherName(result.getString("personalData_mother_name"));
				pd.setParentsAddress(result.getString("personalData_parents_adress"));
				pd.setParentsMobileNumber(result.getString("personalData_parents_mobile_number"));
				list.add(pd);
			}

			result.close();
			System.out.println("[successful]");
			return list;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	//============================================================================================================================================//
	//=============================================================WEEK TIMETABLE=================================================================//
	//============================================================================================================================================//
	@Override
	public WeekTimetable insertWeekTimetable(WeekTimetable wt) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request insertWeekTimetable() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "insert into weekTimetable(weekTimetable_id, weekTimetable_from, weekTimetable_to"
					+ ", weekTimetable_monday, weekTimetable_teusday, weekTimetable_wednesday, weekTimetable_thursday"
					+ ", weekTimetable_friday)"
					+ " values (null, ?, ?, ?, ?, ?, ?, ?)";
		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			//statement.setLong(1, pd.getId());
			statement.setString(1,  wt.getFrom());
			statement.setString(2,  wt.getTo());
			statement.setString(3,  wt.getMonday());
			statement.setString(4,  wt.getTeusday());
			statement.setString(5,  wt.getWednesday());
			statement.setString(6,  wt.getThursday());
			statement.setString(7,  wt.getFriday());

			statement.executeUpdate();

			ResultSet result = statement.getGeneratedKeys();
			if(result.next()) {
				wt.setId(result.getLong(1));
			}

			result.close();
			System.out.println("[successful]");
			return wt;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void updateWeekTimetable(WeekTimetable wt) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request updateWeekTimetable() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "update weekTimetable set weekTimetable_from = ?, weekTimetable_to = ?"
				+ ", weekTimetable_monday = ?, weekTimetable_teusday = ?, weekTimetable_wednesday = ?"
				+ ", weekTimetable_thursday = ?, weekTimetable_friday = ?"
				+ " where weekTimetable_id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setString(1,  wt.getFrom());
			statement.setString(2,  wt.getTo());
			statement.setString(3,  wt.getMonday());
			statement.setString(4,  wt.getTeusday());
			statement.setString(5,  wt.getWednesday());
			statement.setString(6,  wt.getThursday());
			statement.setString(7,  wt.getFriday());
			statement.setLong(8, wt.getId());

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void deleteWeekTimetable(Long id) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request deleteWeekTimetable() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "delete from weekTimetable where weekTimetable_id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public WeekTimetable getWeekTimetableById(Long id) throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request getWeekTimetableById() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "select * from weekTimetable where WeekTimetable_id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			ResultSet result = statement.executeQuery();

			WeekTimetable wt = null;
			if(result.next()) {
				wt = new WeekTimetable();
				wt.setId(result.getLong("weekTimetable_id"));
				wt.setFrom(result.getString("weekTimetable_from"));
				wt.setTo(result.getString("weekTimetable_to"));
				wt.setMonday(result.getString("weekTimetable_monday"));
				wt.setTeusday(result.getString("weekTimetable_teusday"));
				wt.setWednesday(result.getString("weekTimetable_wednesday"));
				wt.setThursday(result.getString("weekTimetable_thursday"));
				wt.setFriday(result.getString("weekTimetable_friday"));
			}

			result.close();
			System.out.println("[successful]");
			return wt;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public List<WeekTimetable> getAllWeekTimetable() throws RemoteException {
		try {
			System.out.println("\nClient " + getClientHost() + " request getAllWeekTimetable() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		Statement statement = null;

		String sql = "select * from weekTimetable";

		try{
			statement = DatabaseConnection.getConnection().createStatement();
			ResultSet result = statement.executeQuery(sql);

			List<WeekTimetable> list = new ArrayList<WeekTimetable>();

			while(result.next()) {
				PersonalData pd = new PersonalData();
				pd.setId(result.getLong("personalData_id"));
				pd.setRegisterationNumber(result.getLong("personalData_registeration_number"));
				pd.setStudentName(result.getString("personalData_student_name"));
				pd.setBirthDate(LocalDate.parse(result.getDate("personalData_birth_date").toString()));
				pd.setBirthLocation(result.getString("personalData_birth_location"));
				pd.setPESEL(result.getLong("personalData_PESEL"));
				pd.setFatherName(result.getString("personalData_father_name"));
				pd.setMotherName(result.getString("personalData_mother_name"));
				pd.setParentsAddress(result.getString("personalData_parents_adress"));
				pd.setParentsMobileNumber(result.getString("personalData_parents_mobile_number"));
				list.add(pd);
			}

			result.close();
			System.out.println("[successful]");
			return list;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	//============================================================================================================================================//
	//=============================================================PROGRAM========================================================================//
	//============================================================================================================================================//


	//============================================================================================================================================//
	//=============================================================BOOKS==========================================================================//
	//============================================================================================================================================//


	//============================================================================================================================================//
	//=============================================================SUBJECTS=======================================================================//
	//============================================================================================================================================//


	//============================================================================================================================================//
	//=============================================================TRIPS==========================================================================//
	//============================================================================================================================================//


	//============================================================================================================================================//
	//=============================================================EVENTS=========================================================================//
	//============================================================================================================================================//


	//============================================================================================================================================//
	//=============================================================ADDITIONAL BEHAVIOUR===========================================================//
	//============================================================================================================================================//

	@Override
	public Person insertPerson(Person person) throws RemoteException {
		try {
			System.out.println("\nClient" + getClientHost() + " request insertPerson() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "insert into person(id, first_name, last_name, birth_date) values (null, ?, ?, ?)";
		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, person.getFirstName());
			statement.setString(2,  person.getLastName());
			statement.setDate(3,  Date.valueOf(person.getBirthDate().toString()));

			statement.executeUpdate();

			ResultSet result = statement.getGeneratedKeys();
			if(result.next()) {
				person.setId(result.getLong(1));
			}

			result.close();
			System.out.println("[successful]");
			return person;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void updatePerson(Person person) throws RemoteException {
		try {
			System.out.println("\nClient" + getClientHost() + " request updatePerson() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "update person set first_name = ?"
				+ ", last_name = ?, birth_date = ?"
				+ " where id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setString(1, person.getFirstName());
			statement.setString(2,  person.getLastName());
			statement.setDate(3,  Date.valueOf(person.getBirthDate().toString()));
			statement.setLong(4, person.getId());

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	@Override
	public void deletePerson(Long id) throws RemoteException {
		try {
			System.out.println("\nClient" + getClientHost() + " request deletePerson() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "delete from person where id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			statement.executeUpdate();
			System.out.println("[successful]");

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public Person getPersonById(Long id) throws RemoteException {
		try {
			System.out.println("\nClient" + getClientHost() + " request getPersonById() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		PreparedStatement statement = null;

		String sql = "select * from person where id = ?";

		try {
			statement = DatabaseConnection.getConnection().prepareStatement(sql);
			statement.setLong(1,  id);

			ResultSet result = statement.executeQuery();

			Person person = null;
			if(result.next()) {
				person = new Person();
				person.setId(result.getLong("id"));
				person.setFirstName(result.getString("first_name"));
				person.setLastName(result.getString("last_name"));
				person.setBirthDate(LocalDate.parse(result.getDate("birth_date").toString()));
			}

			result.close();
			System.out.println("[successful]");
			return person;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

	@Override
	public List<Person> getAllPerson() throws RemoteException {
		try {
			System.out.println("\nClient" + getClientHost() + " request getAllPerson() method...");
		} catch (ServerNotActiveException ex) {
			ex.printStackTrace();
		}

		Statement statement = null;

		String sql = "select * from person";

		try{
			statement = DatabaseConnection.getConnection().createStatement();
			ResultSet result = statement.executeQuery(sql);

			List<Person> list = new ArrayList<Person>();

			while(result.next()) {
				Person person = new Person();
				person.setId(result.getLong("id"));
				person.setFirstName(result.getString("first_name"));
				person.setLastName(result.getString("last_name"));
				person.setBirthDate(LocalDate.parse(result.getDate("birth_date").toString()));
				list.add(person);
			}

			result.close();
			System.out.println("[successful]");
			return list;

		} catch (SQLException ex) {
			System.out.println("[failed]");
			ex.printStackTrace();
			return null;
		} finally {
			if(statement != null) {
				try {
					statement. close();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			try {
				DatabaseConnection.getConnection().close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
	}

}
